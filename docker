# Run nginx docker
docker pull nginx
docker run -p 8080:80 -d nginx
# access nginx container
docker exec -it <container-id> /bin/sh

# Install editor within container
# To install editor, you need to run update command first
apt-get update
apt-get install vim


# Adding custom HTML
# By default, Nginx looks in the /usr/share/nginx/html directory inside of the container for files to serve. We need to get our html files into this directory. A fairly simple way to do this is use a mounted volume. With mounted volumes, we are able to link a directory on our local machine and map that directory into our running container.
# Create a directory named site-content. In this directory add an index.html file and add content to it. Then start nginx as below:
sudo docker run -it --rm -d -p 8080:80 -v ~/site-content:/usr/share/nginx/html nginx
# check filesystem and other particulars
docker image inspect <image-name>
docker image history <image-name>
#Building nginx custom image

# Images enable us to move our deployments instead of just having them on our local devices
# Create a dockerfile in the same directory (in this case site-content) and add the following content

FROM nginx:latest
COPY ./index.html /usr/share/nginx/html/index.html

# We start building our custom image by using a base image. On line 1, you can see we do this using the FROM command. This will pull the nginx:latest image to our local machine and then build our custom image on top of it.

# Next, we COPY our index.html file into the /usr/share/nginx/html directory inside the container overwriting the default index.html file provided by nginx:latest image.

# Youâ€™ll notice that we did not add an ENTRYPOINT or a CMD to our Dockerfile. We will use the underlying ENTRYPOINT and CMD provided by the base NGINX image.

# Build the image

docker build -t nginx .

# And run the image
docker run -it --rm -d -p 8080:80 nginx

MiNIKUBE KUBERNETES

# Minikube is used to carry out local Kebernetes tests and for learning purposes. It Creates a single node local Kubernetes cluster. It requires docker or a hypervisor such as KVM, HyperV or VirtualBox ro run locally. For my case, I an running with VirtualBox
#
#To start minikube with VirtualBox
minikube start --vm-driver=virtualbox

# Run Nginx deployment

kubectl create deployment nginx --image=nginx:latest -o yaml > nginx.yml
kubectl expose deployment nginx --type=NodePort -o yaml > nginx.yml

kubectl describe service nginx

# get nginx url

minikube services nginx --url

# Scale deployment

kubectl scale deployment nginx --replicas=2

# describe deployment
kubectl describe deployment <deployment-name>

# Pushing images to docker hub repository
# First login to the repository
docker login docker.io # provide username and password when prompted
# you need to have tagged the image according to the repository username and the repository name. For example if you have an imaged named factorial, you can tag it as below:

# first login to dockerhud

docker login # provide login id and password

docker tag factorial cheplorna/lorna:factorial

# where cheplorna is the username of my docker hub and lorna is the repository name, factorial being the name of the image.
# Now push to repository
docker push cheplorna/lorna:factorial



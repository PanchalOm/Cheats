# Getting Started with Terraform for Openstack
Steps:
1. Install terraform
Download terraform binary, extract and copy it to PATH
2. Create a working directory
mkdir terraform-workspace
3. Change to the directory and create working files (resources)
 - You can choose to manage different stuff in different files (for better organization) or use the same one file
 - Terraform reads from .tf files
 - First create a provider .tf file
   vim providers.tf
   # content : In this case for openstack
   terraform {
    required_version = ">= 0.14.0"
     required_providers {
      openstack = {
       source  = "terraform-provider-openstack/openstack"
       version = "~> 1.35.0"
    }
  }
}

4. Initialize terraform
terraform init
# Sample output
Initializing the backend...

Initializing provider plugins...
- Finding terraform-provider-openstack/openstack versions matching "~> 1.35.0"...
- Installing terraform-provider-openstack/openstack v1.35.0...
- Installed terraform-provider-openstack/openstack v1.35.0 (self-signed, key ID 4F80527A391BEFD2)

Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/cli/plugins/signing.html

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

5. Manage ssh key pair for the cloud VMs accessibility
- Create file main.tf
# content:
resource "openstack_compute_keypair_v2" "my-cloud-key" {
  name       = "my-key"
  public_key = "ssh-rsa AAAAB3Nz..."
}
6. Provide openstack credentials

provider "openstack" {
  user_name = "username"
  password  = "password"
  auth_url  = "http://<IP>/identity"
  user_domain_name = "Default"
  project_domain_name = "Default"
} 
6. Run terraform plan

7. Create an instance resource
resource "openstack_compute_instance_v2" "my_instance" {
  name      = "my_instance"
  image_id  = "0b89b169-0ddb-46df-94cd-748692421574"
  flavor_name = "m1.small"
  key_pair  = "my-key"

  network {
    uuid = "ad3eddbb-fc0f-4450-a427-3f050ea2f0e1"
    name = "public_net"
  }
}

8. run terraform apply


# The Script

terraform {
required_version = ">= 0.14.0"
  required_providers {
    openstack = {
      source  = "terraform-provider-openstack/openstack"
      version = "~> 1.35.0"
    }
  }
}

provider "openstack" {
  user_name = "username"
  password  = "password"
  auth_url  = "http://<ip>/identity"
  user_domain_name = "Default"
  project_domain_name = "Default"
}


resource "openstack_compute_instance_v2" "my_instance" {
  name      = "my_instance"
  image_id  = "0b89b169-0ddb-46df-94cd-748692421574"
  flavor_name = "m1.small"
  key_pair  = "my-key"

  network {
    uuid = "ad3eddbb-fc0f-4450-a427-3f050ea2f0e1"
    name = "public_net"
  }
}

# check vm created, e.g its IP address
terraform show


# What is you want to add more VMs to create a cluster?
# The configuration is similar to the above. we only need to add the configuration for the new VMs
 resource "openstack_compute_instance_v2" "exec" {
  name            = "exec-${count.index}"
  image_name      = "denbi-centos7-j10-2e08aa4bfa33-master"
  flavor_name     = "m1.tiny"
  key_pair        = "${openstack_compute_keypair_v2.my-cloud-key.name}"
  security_groups = ["default"]
  count           = 2

  network {
    name = "public"
  }
}

#USING TERRAFORM WITH AWS

Create AWS account

Once you sign up for AWS, you will always get a root account that has rights to everything in your account. It ia always recommended to create IAM users to give limited privileges and avoid using the root user. Once you create the user, there are specific permissions to give the user to be able to use terraform. These are:
AmazonEC2FullAccess: required for this blog post.
AmazonS3FullAccess: required for How to manage Terraform state.
AmazonDynamoDBFullAccess: required for How to manage Terraform state.
AmazonRDSFullAccess: required for How to create reusable infrastructure with Terraform modules.
CloudWatchFullAccess: required for Terraform tips & tricks: loops, if-statements, and pitfalls.
IAMFullAccess: required for Terraform tips & tricks: loops, if-statements, and pitfalls.

# Export AWS credentials

export AWS_ACCESS_KEY_ID=(your access key id)
export AWS_SECRET_ACCESS_KEY=(your secret access key)

# Deplaoying a single server

# Terraform is written in a language called HCL. Uses files with the extension .tf
# Is a declarative language - You describe your desired state - Terraform will figure out how to create it. 
# Terraform can create infrastructure across a wide variety of platforms, or what it calls providers, including AWS, Azure, Google Cloud, DigitalOcean, and many others.

Step 1: configure the provider(s) you want to use

# Create a main.tf file. Add the following

provider "aws" {
  region = "us-east-2"
  shared_credentials_file = "/home/lorna/.aws/credentials"
}

# resources to create can be servers, databases, and load balancers among others.

# Create an EC2 instance. Add the following to the main.tf file

resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
}

# Initialize terraform for AWS - so when first starting to use Terraform, you need to run terraform init to tell Terraform to scan the code, figure out what providers youâ€™re using, and download the code for them.

sudo terraform init
[sudo] password for lorna: 

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v3.34.0...
- Installed hashicorp/aws v3.34.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

# Next, terraform plan then terraform apply
